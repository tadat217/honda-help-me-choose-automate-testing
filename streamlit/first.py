import streamlit as st
import pandas as pd
import numpy as np
import json
import os

st.title("Test Results üìä")

# T·∫°o 2 tab v·ªõi st.tabs
tab_a, tab_b = st.tabs(["Workflow", "Models"])

# N·ªôi dung cho Tab A
with tab_a:

    # L·∫•y t·∫•t c·∫£ c√°c file JSON c√≥ ch·ª©a "test_result_workflow_" trong th∆∞ m·ª•c json
    json_files = [f for f in os.listdir('json') if f.startswith('test_result_workflow_') and f.endswith('.json')]
    
    workflow_results = {}
    for file in json_files:
        file_path = os.path.join('json', file)
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
                workflow_results.update(data)
        except Exception as e:
            st.error(f"Error when read file {file}: {str(e)}")
    
    cnt_passed_workflow = 0
    cnt_failed_workflow = 0

    st.header("Summary", divider=True)
    for id, workflow in workflow_results.items():
        if workflow['status'] == 'passed':  
            cnt_passed_workflow += 1
        else:
            cnt_failed_workflow += 1

    st.write(f"Total workflow: {len(workflow_results)}")
    st.markdown(f":green[Passed workflow: {cnt_passed_workflow}]")
    st.markdown(f":red[Failed workflow: {cnt_failed_workflow}]")

    st.header("Detail", divider=True)
    for id, workflow in workflow_results.items():
        status = workflow['status']
        if status == 'passed':
            status_color = "green"
            icon = "‚úÖ"
        else:
            status_color = "red"
            icon = "‚ùå"
        with st.expander(f":{status_color}[Workflow {id} - {status}] {icon}"):
            st.write(workflow)
    # Th√™m expander ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung c√≥ th·ªÉ m·ªü r·ªông/thu g·ªçn
    # with st.expander("Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem chi ti·∫øt v·ªÅ k·∫øt qu·∫£ workflow"):
    #     st.markdown("""
    #     ### Chi ti·∫øt k·∫øt qu·∫£ workflow
        
    #     ƒê√¢y l√† ph·∫ßn n·ªôi dung chi ti·∫øt v·ªÅ k·∫øt qu·∫£ workflow m√† b·∫°n c√≥ th·ªÉ xem khi m·ªü r·ªông ph·∫ßn n√†y.
        
    #     #### C√°c th√¥ng s·ªë quan tr·ªçng:
    #     - **T·ª∑ l·ªá th√†nh c√¥ng**: 85%
    #     - **Th·ªùi gian trung b√¨nh**: 2.5 gi√¢y
    #     - **S·ªë l∆∞·ª£ng workflow ƒë√£ ch·∫°y**: 120
        
    #     #### L∆∞u √Ω:
    #     C√°c workflow ƒë∆∞·ª£c ki·ªÉm tra d·ª±a tr√™n d·ªØ li·ªáu t·ª´ file JSON v√† ƒë∆∞·ª£c x√°c th·ª±c th√¥ng qua c√°c b∆∞·ªõc ki·ªÉm tra t·ª± ƒë·ªông.
        
    #     ```python
    #     # V√≠ d·ª• v·ªÅ c√°ch workflow ƒë∆∞·ª£c x·ª≠ l√Ω
    #     async def process_workflow(page, workflow, models):
    #         for question_id, answer_id in workflow:
    #             # X√°c th·ª±c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
    #             await validate_question_answer(page, question_id, answer_id)
    #             # X√°c th·ª±c c√°c model ƒë∆∞·ª£c hi·ªÉn th·ªã
    #             await validate_model_cards(page, models)
    #     ```
    #     """)
        
    #     # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu m·∫´u v·ªÅ workflow
    #     workflow_data = pd.DataFrame({
    #         'ID': [1, 2, 3, 4, 5],
    #         'Workflow': ['[(0, 1), (7, 0)]', '[(0, 2), (11, 2)]', '[(0, 1), (8, 5)]', '[(0, 2), (13, 1)]', '[(0, 2), (12, 0)]'],
    #         'Th·ªùi gian (s)': [2.1, 3.4, 1.8, 2.7, 2.2],
    #         'Tr·∫°ng th√°i': ['Th√†nh c√¥ng', 'Th√†nh c√¥ng', 'L·ªói', 'Th√†nh c√¥ng', 'Th√†nh c√¥ng']
    #     })
    #     st.dataframe(workflow_data)

# N·ªôi dung cho Tab B
with tab_b:
    st.header("ƒê√¢y l√† Tab B")
    st.markdown("""
    Tab n√†y cho ph√©p b·∫°n t·∫£i l√™n file v√† t√πy ch·ªânh c√°c th√¥ng s·ªë.
    
    *H√£y th·ª≠ c√°c t√≠nh nƒÉng t∆∞∆°ng t√°c!*
    """)